app.service('loader', ['opcodes','$log', function (opcodes,$log)  {
    return {
        go: function (input) {
				// Contains the program code & data generated by the assembler
            var code = [];
            // Contains the mapping from instructions to assembler line
            var mapping = {};
            // Hash map of label used to replace the labels after the assembler generated the code
            var labels = {};
            // Hash of uppercase labels used to detect duplicates
            var normalizedLabels = {};
				$log.debug("loader entry"+code);
				// Split text into code lines
				
				var textInput=input.replace(/\n+/g, ' ').replace(/\s+/g,' ');
				$log.debug("loader textInput "+textInput);
				
				
            var snumeri = textInput.split(' ');
            
            for( i= 0 ; i< snumeri.length ; i++){
						opcode=parseInt( snumeri[i]);
						if (opcode != opcode){
							throw {error:"ciao", line: 3};
						}
						code.push(opcode);
            }
				
				
				

				return {code: code, mapping: mapping, labels: labels};
				}
        };
}]);
